/*
 * -------------------------------------------------
 *  nf-core/smrnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  design = false
  outdir = './results'
  protocol = false

  // Reference
  genome = false
  save_reference = false
  mirna_gtf = false

  // Downsampling
  downsample_num = false

  // Trimming
  min_length = 18
  max_length = false
  save_trimmed = false
  trim_nextseq = 0

  // QC
  skip_fastqc = false
  skip_multiqc = false

  // Salmon
  deliver_auxfiles = false

  // Boilerplate options
  name = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'us-east-1'

  // Comparison options
  comparisons = false
  isomirs_fdr = 0.05
  isomirs_lfc = 0.585
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'zymoresearch/aladdin-smrnaseq:1.0.0'
 
// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
//try {
//  includeConfig "${params.custom_config_base}/nfcore_custom.config"
//} catch (Exception e) {
//  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
//}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
}

// Load igenomes.config
includeConfig 'conf/igenomes.config'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/execution_timeline_${timestamp}.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/execution_report_${timestamp}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace_${timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag_${timestamp}.svg"
}

manifest {
  name = 'Zymo-Research/aladdin-smrnaseq'
  author = 'Zhenfeng Liu, Nora Sharp, originally adapted from nfcore/smrnaseq'
  homePage = 'https://github.com/Zymo-Research/aladdin-smrnaseq'
  description = 'Small RNA-Seq analysis pipeline, part of the Aladdin Bioinformatics Platform pipeline catalog'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.07.1'
  version = '0.0.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
